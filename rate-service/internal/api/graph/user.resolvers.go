package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"gateway/internal/api/graph/model"
	"gateway/internal/users"

	"github.com/sirupsen/logrus"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUserInput) (*model.User, error) {
	logrus.Info("mutationResolver.CreateUser(ctx context.Context, input model.NewUserInput) called")
	uinfo := &users.UserInfo{
		FirstName:    input.Name,
		LastName:     input.SecondName,
		SecondName:   input.LastName,
		Email:        input.Email,
		PassportData: input.PassportData,
		BirthDate:    input.BirthDate,
	}

	user, err := r.UserServer.Create(ctx, uinfo)
	return mapUserToDTOUser(user), err
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return []*model.User{}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
